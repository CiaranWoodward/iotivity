#******************************************************************
#
# Copyright 2015 Samsung Electronics All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Import('env')

import os
import os.path

certtests_env = env.Clone()

src_dir = certtests_env.get('SRC_DIR')
######################################################################
# Build flags
######################################################################
certtests_env.PrependUnique(CPPPATH = [
		'../../../include/',
		'../../../csdk/stack/include',
		'../../../csdk/security/provisioning/ck_manager/include',
		'../../../csdk/connectivity/inc/pkix',
		'../../../csdk/logger/include',
		'../../../oc_logger/include',
		'../../../../extlibs/asn1cert',
		'../../../../extlibs/tinydtls/ecc/',
		'../../../../extlibs/tinydtls/sha2/',
		'../../../../extlibs/gtest/gtest-1.7.0/include'
		])

certtests_env.AppendUnique(CXXFLAGS = ['-std=c++0x', '-Wall', '-pthread'])
certtests_env.AppendUnique(LIBPATH = [env.get('BUILD_DIR')])
certtests_env.AppendUnique(LIBPATH = [src_dir + '/extlibs/gtest/gtest-1.7.0/lib/.libs'])

certtests_env.AppendUnique(LIBS = ['occert', 'CKManager', 'asn1'])
certtests_env.AppendUnique(LIBS = ['oc', 'oc_logger', 'octbstack', 'tinydtls', 'gtest_main', 'gtest', 'pthread'])

if env.get('LOGGING'):
	certtests_env.AppendUnique(CPPDEFINES = ['TB_LOG'])

######################################################################
# Source files and Targets
######################################################################
cert_src = Glob('*.cpp')
unittests = certtests_env.Program('certtests', cert_src)

Alias("certtests", [unittests])

certtests_src_dir = src_dir + '/resource/csdk/security/provisioning/ck_manager/unittest/test_data/'
certtests_build_dir = env.get('BUILD_DIR') +'/resource/provisioning/ck_manager/unittests'
certtests_env.Alias("install", env.Install( certtests_build_dir, [ certtests_src_dir + 'CKMInfo.json']))

env.AppendTarget('certtests')
if env.get('TEST') == '1':
	target_os = env.get('TARGET_OS')
	if target_os == 'linux':
		out_dir = env.get('BUILD_DIR')
		result_dir = env.get('BUILD_DIR') + '/test_out/'
		if not os.path.isdir(result_dir):
			os.makedirs(result_dir)
		certtests_env.AppendENVPath('GTEST_OUTPUT', ['xml:'+ result_dir])
		certtests_env.AppendENVPath('LD_LIBRARY_PATH', [out_dir])
		certtests_env.AppendENVPath('LD_LIBRARY_PATH', ['./extlibs/gtest/gtest-1.7.0/lib/.libs'])
		ut = certtests_env.Command ('ut', None, out_dir + 'resource/provisioning/unittests/certtests')
		AlwaysBuild ('ut')

