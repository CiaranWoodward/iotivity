##
# CA build script
##

Import('env')

ca_os = env.get('TARGET_OS')
ca_transport = env.get('TARGET_TRANSPORT')
secured = env.get('SECURED')
root_dir = './../'
ca_path = './'
extlib_dir_connectivity = '../../../../../../../'
extlib_dir_iotivity     = '../../../../'
build_dir = env.get('BUILD_DIR')

#####################################################################
# Source files and Target(s)
######################################################################

print"Reading ca script %s"%ca_transport

env.PrependUnique(CPPPATH = [root_dir + '/api/'])
env.AppendUnique(CPPPATH = [root_dir + '/inc/'])
env.AppendUnique(CPPPATH = [root_dir + '/lib/libcoap-4.1.1/'])
env.AppendUnique(CPPPATH = [root_dir + '/common/inc/'])

#Getting common source files
env.SConscript('./../common/SConscript')


env.AppendUnique(CA_SRC=[ca_path+'adapter_util/caadapterutils.c'])
env.AppendUnique(CA_SRC=[ca_path+'adapter_util/camsgparser.c'])
if env.get('SECURED') == '1':
	env.AppendUnique(CA_SRC=[ca_path+'adapter_util/caadapternetdtls.c'])
	env.AppendUnique(CPPPATH = [root_dir + '/external/inc/'])

if ca_os == 'arduino':
	ca_common_src = [
		ca_path + 'caconnectivitymanager_singlethread.c',
		ca_path + 'cainterfacecontroller_singlethread.c',
		ca_path + 'camessagehandler_singlethread.c',
		ca_path + 'canetworkconfigurator_singlethread.c',
		ca_path + 'caprotocolmessage_singlethread.c',
		ca_path + 'caremotehandler.c',
		ca_path + 'caretransmission_singlethread.cpp',
		]
else:
	ca_common_src = [
		ca_path + 'caconnectivitymanager.c',
		ca_path + 'cainterfacecontroller.c',
		ca_path + 'camessagehandler.c',
		ca_path + 'canetworkconfigurator.c',
		ca_path + 'caprotocolmessage.c',
		ca_path + 'caqueueingthread.c',
		ca_path + 'caremotehandler.c',
		ca_path + 'caretransmission.c',
		]
	if secured == '1':
		env.AppendUnique(CPPDEFINES = ['__WITH_DTLS__'])
		current_dir=env.get('SRC_DIR')
		if current_dir.find('connectivity') == -1:
			env.AppendUnique(CPPPATH = [extlib_dir_iotivity + 'extlibs/tinydtls'])
		else:
			env.AppendUnique(CPPPATH = [root_dir + extlib_dir_connectivity + 'extlibs/tinydtls'])
env.AppendUnique(CA_SRC = ca_common_src)

if 'ALL' in ca_transport:
	env.SConscript(ca_path + 'ethernet_adapter/SConscript')
	env.SConscript(ca_path + 'wifi_adapter/SConscript')
	env.SConscript(ca_path + 'bt_edr_adapter/SConscript')
	env.SConscript(ca_path + 'bt_le_adapter/SConscript')

if 'WIFI' in ca_transport:
	env.SConscript(ca_path + 'wifi_adapter/SConscript')

if 'ETHERNET' in ca_transport:
	env.SConscript(ca_path + 'ethernet_adapter/SConscript')

if 'BT' in ca_transport:
	env.SConscript(ca_path + 'bt_edr_adapter/SConscript')

if 'BLE' in ca_transport:
	env.SConscript(ca_path + 'bt_le_adapter/SConscript')

print "Include path is %s" %env.get('CPPPATH')
print "Files path is %s" %env.get('CA_SRC')

calib = env.StaticLibrary('connectivity_abstraction', env.get('CA_SRC'))
env.InstallTarget(calib, 'libconnectivity_abstraction')
if env.get('SECURED') == '1':
	if current_dir.find('connectivity') == -1:
		env.Install(build_dir, extlib_dir_iotivity + 'extlibs/tinydtls/libtinydtls.a')
	else:
		env.Install(build_dir, root_dir + extlib_dir_connectivity + 'extlibs/tinydtls/libtinydtls.a')

