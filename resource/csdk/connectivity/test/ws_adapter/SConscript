#******************************************************************
#
# Copyright 2017 Samsung Electronics All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

import os
import os.path
from tools.scons.RunTest import run_test

Import('test_env')

# SConscript file for Local PKI google tests
wstest_env = test_env.Clone()
target_os = wstest_env.get('TARGET_OS')
target_transport = wstest_env.get('TARGET_TRANSPORT')
rd_mode = wstest_env.get('RD_MODE')

######################################################################
# Build flags
######################################################################
if wstest_env.get('WITH_UPSTREAM_LIBCOAP') == '1':
    wstest_env.AppendUnique(CPPPATH=[
        os.path.join('#', 'extlibs', 'libcoap', 'libcoap', 'include')
    ])
else:
    wstest_env.AppendUnique(CPPPATH=[
        os.path.join('#', 'resource', 'csdk', 'connectivity', 'lib',
                     'libcoap-4.1.1', 'include')
    ])

wstest_env.AppendUnique(CPPPATH = ['#extlibs/libwebsockets/libwebsockets/lib',
								'#extlibs/libwebsockets/libwebsockets/build/'])

wstest_env.AppendUnique(LIBPATH = ['#extlibs/libwebsockets/libwebsockets/build/lib/'])
wstest_env.AppendUnique(LIBS = ['websockets'])
wstest_env.AppendUnique(RPATH = [wstest_env.get('SRC_DIR') + '/extlibs/libwebsockets/libwebsockets/build/lib/'])

wstest_env.PrependUnique(CPPPATH = [
                '#/resource/c_common/octimer/include',
                '#/extlibs/mbedtls/mbedtls/include',
                '#/resource/csdk/connectivity/api',
                '#/resource/csdk/connectivity/inc',
                '#/resource/csdk/connectivity/common/inc',
                '#/resource/csdk/logger/include',
                '#/resource/csdk/include',
                '#/resource/csdk/stack/include',
                '#/extlibs/hippomocks/hippomocks',
                '#/resource/oc_logger/include',
                '#/resource/csdk/connectivity/src/ws_adapter'
               ])

wstest_env.PrependUnique(LIBS=['coap'])
wstest_env.PrependUnique(LIBS=['connectivity_abstraction'])

wstest_env.PrependUnique(LIBS=[
    'octbstack_internal',
    'ocsrm',
    'routingmanager',
])

if target_os not in ['arduino', 'darwin', 'ios', 'msys_nt', 'windows']:
    wstest_env.AppendUnique(LIBS=['rt'])

if wstest_env.get('SECURED') == '1':
    wstest_env.AppendUnique(LIBS = ['ssl', 'crypto'])
    wstest_env.AppendUnique(LIBPATH = ['/usr/local/ssl/lib'])

# c_common calls into mbedcrypto.
wstest_env.AppendUnique(LIBS=['mbedcrypto'])

if 'CLIENT' in rd_mode and target_os not in [
        'arduino', 'darwin', 'ios', 'windows', 'winrt'
]:
    wstest_env.PrependUnique(LIBS=['oc', 'oc_logger'])
if 'SERVER' in rd_mode:
    if target_os in ['linux', 'tizen']:
        wstest_env.ParseConfig('pkg-config --cflags --libs sqlite3')
    elif target_os in ['msys_nt', 'windows']:
        wstest_env.PrependUnique(LIBS=['sqlite3'])

if target_os not in ['msys_nt', 'windows']:
    wstest_env.AppendUnique(LIBS = ['m'])
else:
    wstest_env.AppendUnique(CCFLAGS=['/W4'])

######################################################################
# Source files and Targets
######################################################################

tests_src = [
    'ca_api_unittest_ws.cpp',
    'ws_adapter_api_test.cpp',
    'cawsutil_test.cpp'
]

if wstest_env.get('SECURED') == '1':
    wstest_env.AppendUnique(CPPPATH = ['/usr/local/ssl/include'])
    tests_src += ['cawsadapter_ssl_test.cpp']

wstests = wstest_env.Program('wsadaptertest', tests_src)

Alias("test", [wstests])

wstest_env.AppendTarget('test')
if wstest_env.get('TEST') == '1':
        if target_os in ['linux', 'windows']:
                wstest_env.AppendENVPath('PATH', wstest_env.get('BUILD_DIR'))
                run_test(wstest_env, 'resource_csdk_connectivity_ws_test.memcheck', 'resource/csdk/connectivity/test/ws_adapter/wsadaptertest')
