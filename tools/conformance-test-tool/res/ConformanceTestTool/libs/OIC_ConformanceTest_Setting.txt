** Settings ***
Documentation     OIC Conformance Test Setting
Library           ConformanceKeyword.py
Library        OperatingSystem
Library        Collections
Library        DateTime
Resource	OIC_Core_Spec.txt


*** Keywords ***
Start Capture
    ${file_name}    Get Wireshark File Name    ${SUITE NAME}
    OperatingSystem.Run      tshark -i any -f udp -w testreport/${file_name} | - &
    BuiltIn.Sleep    2s

End Capture
    OperatingSystem.Run    killall tshark
    OperatingSystem.Run    killall dtls_relay

Pre Condition Crudn Server
    Start Capture
    Set Global Variable    ${DUT1_ID}    Server_DUT1
    Set Global Variable    ${SETUP_FINISHED}    ${False}
    ${define_dut_result}    Define DUT Information    ${DUT1_ID}    ${DUT1_INFO_PATH}    ${DUT_TYPE_SERVER}
    Should Be True    ${define_dut_result}    The DUTDescriptor has some problem!!
    @{discoverable_resources}    Get DUT Info Value    ${RESOURCE_TYPE}    ${DUT1_ID}    ${DISCOVERABLE}=1
    ${resource_ip}    ${resource_port}    ${secured_port}    Get IP And Ports
    Set Global Variable    ${SECURED_PORT}    ${secured_port}
    Set Global Variable    ${SERVER_IP}    ${resource_ip}
    Set Global Variable    ${SERVER_PORT}    ${resource_port}
    Run Keyword If    ${${secured_port}} > 0    Initialize Device Controller    ${DEVICE_ID}
    Run Keyword If    ${${secured_port}} > 0    Change Working Directory    ${DTLS_RELAY_DIR}
    Run Keyword If    ${${secured_port}} > 0    Execute Application    ${DTLS_RELAY_PROCESS_ID}    ${DTLS_RELAY}
    Run Keyword If    ${${secured_port}} > 0    Start Application Log    ${DEVICE_ID}    ${DTLS_RELAY_PROCESS_ID}
    Run Keyword If    ${${secured_port}} > 0    Sleep    5 seconds
    Run Keyword If    ${${secured_port}} > 0    Initialize Secured Device    ${resource_ip}    ${${secured_port}}
    Run Keyword If    ${${secured_port}} > 0    Set Global Variable    ${SETUP_FINISHED}    ${True}

Post Condition Crudn Server
    Run Keyword If    ${SETUP_FINISHED} == ${True}    Terminate Dtls Connection
    Run Keyword If    ${${SECURED_PORT}} > 0    Terminate Application    ${DTLS_RELAY_PROCESS_ID}
    Release DUT information     ${DUT1_ID}
    End Capture

Pre Condition Crudn Client
    Start Capture
    Set Global Variable    ${DUT1_ID}    Server_DUT1
    Set Global Variable    ${SETUP_FINISHED}    ${False}
    ${define_dut_result}    Define DUT Information    ${DUT1_ID}    ${DUT1_INFO_PATH}    ${DUT_TYPE_SERVER}
    Start Server
    Print Message    \n-----------------Send Multicast Discovery Request from DUT App-----------------
    Get Discovery Requests

Post Condition Crudn Client
    Stop Server
    Release DUT information     ${DUT1_ID}
    End Capture

Update Representation Multiple Times
        [Arguments]    ${ip}    ${port}    ${href}    ${qos}    ${payload}    ${update_support}    ${no_of_update}
    :FOR    ${index}    IN RANGE    ${no_of_update}
    \   ${msgid}    Generate Message Id
    \   ${token}    Generate Token
    \   ${dut2_response}    Run Keyword If    ${update_support} == ${True}    Send Post Request    ${UNICAST}    ${COAP}    ${msgid}    ${token}    ${ip}    ${${port}}    ${href}    ${qos}    ${payload}
    \   Run Keyword If    ${update_support} == ${False}    ConformanceKeyword.Log To Console    ============== User Control -> Change state of resource for notification ================
    \   Run Keyword If    ${update_support} == ${False}    Builtin.sleep	${${DEFAULT_WAIT_TIME}}

Get Length Available Representation To Update
        [Arguments]     ${DUT_ID}       ${DUT_HREF_QUERY}
	@{representation_list}	Get Dut Resource Value  ${DUT_ID}       ${DUT_HREF_QUERY}       ${REPRESENTATION}    W
        ${length}    Get Length    ${representation_list}
        Log    {@{representation_list}}
	[Return]	${length}

Check Modified Representation Value
        [Arguments]     ${DUT_ID}       ${DUT_HREF_QUERY}	${Response_Payload}
        @{Representation_Keys}  Get Dut Resource Value  ${DUT_ID}       ${DUT_HREF_QUERY}       ${REPRESENTATION}    W
        : FOR   ${Representation_Key}   IN      @{Representation_Keys}
	\   Log		${response_Payload}
	\   @{response_region_key}  Get Json Value  @{Representation_Key}[0]   ${Response_Payload}
	\   Run Keyword Unless    '@{Representation_Key}[1]' == 'array'  Should Be Equal         @{response_region_key}[0]               @{Representation_Key}[2]

Check Modified Partial Representation Value
        [Arguments]     ${DUT_ID}       ${DUT_HREF_QUERY}	${Response_Payload}
        @{Representation_Keys}  Get Dut Resource Value  ${DUT_ID}       ${DUT_HREF_QUERY}       ${REPRESENTATION}    W
        @{response_key}  Get Json Value  ${Representation_Keys[0][0]}   ${Response_Payload}
        @{selected_list}    Set Variable    @{Representation_Keys[0]}
        ${selected_list1}    Set Variable    @{selected_list}[1]
        Run Keyword Unless    '${selected_list1}' == 'array'    Should Be Equal         @{response_key}[0]               ${Representation_Keys[0][2]}

Set Modified Representation Value Payload
	[Arguments]	${DUT_ID}	${DUT_HREF_QUERY}
	Create Json Representation
        Log    ${DUT_HREF_QUERY}
	@{Representation_List}	Get Dut Resource Value  ${DUT_ID}       ${DUT_HREF_QUERY}       ${REPRESENTATION}    W
	: FOR	${Representation_Values}	IN	@{Representation_List}
	\	Add Into Json Representation	@{Representation_Values}[0]	@{Representation_Values}[2]	@{Representation_Values}[1]

Set Modified Partial Representation Value Payload
        [Arguments]     ${DUT_ID}       ${DUT_HREF_QUERY}
        Create Json Representation
        @{Representation_List}  Get Dut Resource Value  ${DUT_ID}       ${DUT_HREF_QUERY}       ${REPRESENTATION}    W
        Add Into Json Representation    ${Representation_List[0][0]}  ${Representation_List[0][2]}  ${Representation_List[0][1]}

Set Modified Partial Representation Value Payload2
        [Arguments]     ${DUT_ID}       ${DUT_HREF_QUERY}    ${index}
        Create Json Representation
        @{Representation_List}  Get Dut Resource Value  ${DUT_ID}       ${DUT_HREF_QUERY}       ${REPRESENTATION}    W
        Add Into Json Representation    ${Representation_List[${index}][0]}  ${Representation_List[${index}][2]}  ${Representation_List[${index}][1]}

Check Response Representation With False
        [Arguments]        ${DUT_ID}     ${Response_Json}        ${Data_Format}  ${Query}       @{Representation}
        : FOR        ${Property}        IN      @{Representation}
        \        Check Discovery Response       ${Property}     ${DUT_ID}      ${Response_Json}   ${Data_Format}        ${Query}	${false}

Check Response Representation
        [Arguments]        ${DUT_ID}     ${Response_Json}        ${Data_Format}  ${Query}       @{Representation}
        : FOR        ${Property}        IN      @{Representation}
        \        Check Discovery Response       ${Property}     ${DUT_ID}      ${Response_Json}   ${Data_Format}        ${Query}

Check Representation
        [Arguments]        ${DUT_ID}     ${Response_Json}        ${Data_Format}  ${Query}       @{Representation}
        : FOR    ${Property}    IN    @{Representation}
        \    @{response_key}  Get Json Value  ${Property}   ${Response_Json}
        \    Should Not Be Empty    @{response_key}[0]
        \    ${error_msg}    Run Keyword If    '${Property}' == '${DATA_MODEL_VERSION}'    Check Data Model Version    @{response_key}[0]
        \    Run Keyword And Continue On Failure     Should Be True    '${error_msg}' == '${NONE}'    ${error_msg}
        \    ${error_msg}    Run Keyword If    '${Property}' == '${SPEC_VERSION}'    Check Spec Version    @{response_key}[0]
        \    Should Be True    '${error_msg}' == '${NONE}'    ${error_msg}

Check In List
        [Arguments]     ${To_Check}     ${does_contain}        @{Type_List}
        ${does_contain}		Get False
        : FOR        ${Resource_Type}        IN      @{Type_List}
        \        : IF   ${dut1_info_href}       IS      ${resource_href}
        \        \        ${does_contain}               Get True
        Should Be True	${does_contatin}

Get Security Client Simulator Directory
		[Arguments]
		${is_cli}	Is Cli Enabled
		${client_dir}	Set Variable If	${is_cli}	${SECURITY_CLIENT_DIR_CLI}	${SECURITY_CLIENT_DIR_GUI}
		[Return]	${client_dir}

Get IP And Ports
	${dut1_response}    Discover All Resources    ${MULTICAST}    ${COAP}    ${OIC_CORE_RESOURCE_DEFAULT_URI}
	Should Not Be Empty    ${dut1_response}
	${dut1_response_json}   Get Response Json       ${dut1_response}
	${validate_json_result}  Validate JSON Format        ${dut1_response_json}
	Should Be True          ${validate_json_result}
	${dut1_response_code}   Get Response Code       ${dut1_response}
	Should Be Equal         ${COAP_RESPONSE_CODE_SUCCESS}   ${dut1_response_code}
	@{dut1_info_hrefs}      Get DUT Info Value      ${HREF}         ${false}      ${DISCOVERABLE}=1
	@{resource_href}        Get Json Value          ${HREF}         ${dut1_response_json}
	Check Type In List      ${resource_href}                ${dut1_info_hrefs}
	${resource_ip}          Get Response Ip         ${dut1_response}
	Should Not Be Empty     ${resource_ip}
	${resource_port}        Get Response Port       ${dut1_response}
	Should Not Be Empty     ${resource_port}
	${secured_port}        Get Response Secured Port       ${dut1_response}
	Should Not Be Empty     ${secured_port}
	[Return]    ${resource_ip}    ${resource_port}    ${secured_port}


Get Response Code IP Port And Payload From Response
	[Arguments]		${dut_response}
	${dut_response_code}   	Get Multicast Discovery Response Code       ${dut_response}
	${resource_ip}          Get Secured Server Ip         ${dut_response}
	Should Not Be Empty     ${resource_ip}
	${resource_port}        Get Secured Server Port       ${dut_response}
	Should Not Be Empty     ${resource_port}
	${response_payload}		Get Multicast Discovery Response Paylaod	${dut_response}
	Should Not Be Empty     ${response_payload}
	[Return]	${dut_response_code}	 ${resource_ip}		${resource_port}	${response_payload}

Take Random Pin From User
        [Arguments]     ${PROCESS_ID}
        ${RANDOM_PIN}	Wait For User Confirmation	Please input the Random Pin generated in Server
        Input Command To Application	${PROCESS_ID}	${RANDOM_PIN}

Get Doxm Selection Payload
        [Arguments]     ${payload}	${is_owned}	${oxm_selection}	${owner}
        ${payload}	Update Payload	${payload}	${OWNED}	${is_owned}
        ${payload}	Update Payload	${payload}	${OXMSEL}	${oxm_selection}
        ${payload}	Update Payload	${payload}	${OWNR}	${owner}
        [Return]	${payload}

Get Pstat Om Selection Payload
        [Arguments]     ${pstat_payload}	${omsel}
        ${payload}	Get Modified Json String	${pstat_payload}	${OM}	${omsel}
        [Return]	${payload}

Get Ownership Transfer Payload
        [Arguments]     ${doxm_payload}	${client_di}
        ${payload}	Get Modified Json String	${doxm_payload}	${OWNED}	true
        ${payload}	Get Modified Json String	${payload}	${OWNR}	${client_di}
        [Return]	${payload}

Get ACL Provisioning Payload
        [Arguments]     ${acl_payload}	${client_di}	${resouce}	${permission}
        ${payload}	Get Modified Json String	${acl_payload}	${RESOURCE}	${resouce}
        ${payload}	Get Modified Json String	${payload}	${PERMISSION}	${permission}
        ${payload}	Get Modified Json String	${payload}	${SUBJECT}	${permission}
        ${payload}	Get Modified Json String	${payload}	${OWNER}	${permission}
        [Return]	${payload}

*** Variables ***
${WRITABLE}    W
${READONLY}    R
${OXMSEL}	oxmsel
${OM}	om
${OWNED}	owned
${OWNR}	ownr
${RESOURCE}	rsrc
${PERMISSION}	perms
${SUBJECT}	sub
${OWNER}	ownrs

${OWNED_STATE_TRUE}	true
${OWNED_STATE_FALSE}	false
${DEFAULT_OWNER}	none
${CTTSW9ULVRlc3QtVG9vbC0wMQ==_CLIENT_DI}	SW9ULVRlc3QtVG9vbC0wMQ==

${OIC_ID}    OIC_DEFINED_RESOURCE
${DUT1_INFO_PATH}       libs/DUTDescriptor.json
${DUT_TYPE_SERVER}      SERVER
${DUT_TYPE_CLIENT}      CLIENT
${DUT_TYPE_BOTH}        BOTH
${MULTICAST}    MULTICAST
${UNICAST}      UNICAST
${COAP}         COAP
${HTTP}         HTTP

${CON}          CON
${NON}          NON
${ACK}          ACK
${RST}          RST
${OBSERVE_ON}    0
${OBSERVE_OFF}    1

#REQUEST KEY
${SOURCE_ADDRESS}	srcAddress
${SOURCE_PORT}		srcPort
${REQUEST_CODE}		requestCode

#DUT Info Key
${HREF}         href
${DISCOVERABLE}         dis
${OBSERVABLE}           obs
${RESOURCE_TYPE}        rt
${INTERFACE}            if
${DEVICE_ID}		di
${DUT_TYPE}             dutType
${REPRESENTATION}	rep
${NAME}        n
${DATA_MODEL_VERSION}    dmv
${SPEC_VERSION}    icv
${PLATFORM_ID}    pi
${MANUFACTURER_NAME}    mnmn

#Representation of core resources
@{REPRESENTATION_OIC_RES}		${HREF}		${RESOURCE_TYPE}	${INTERFACE}
@{REPRESENTATION_OIC_D}		${DEVICE_ID}	${NAME}    ${DATA_MODEL_VERSION}    ${SPEC_VERSION}
@{REPRESENTATION_OIC_P}		${PLATFORM_ID}    ${MANUFACTURER_NAME}

#TestData
${CONFIRMABLE}			${true}
${NON_CONFIRMABLE}		${false}
${FALSE_URI}			/oic/res
${FALSE_RESOURCE_TYPE}	core.dummydummy
${EMPTY_QUERY}    ''
${DEFAULT_WAIT_TIME}	10
${OBSERVE_MAX_ACK_TIMEOUT}    60
${FALSE_DEVICE_ID}	FALSE960-731F-46F1-BEC1-1E6CBD61ADC1
${TEST_REP_VALUE}	1

#Physical Information (It will be moved to DUT_INFO)
${IP}	107.109.7.76
${PORT}	53052
${CREATED_HREF}	-created
${SUBORDINATE_HREF}	/subordinate-sensor

${DISCOVERABLE_RESOURCE_TYPE}	core.dis
${NON_DISCOVERABLE_RESOURCE_TYPE}	core.nondis
${CREATED_DIS_HREF}	-created-discoverable
${CREATED_NON_DIS_HREF}	-created-nondiscoverable

#Test DUT Rep
${FOO_URI}    /oic/foo
${FOO_RESOURCE_TYPE}    foo.foo.foo
@{INVALID_URI_LIST}     /oic/rts        /oic/ifs        /oic/con        /oic/mon        /oic/mnt        /oic/foo 	/oic/ad
@{URI_LIST}     	/oic/rts        /oic/ifs        /oic/con        /oic/mon        /oic/mnt        	/oic/ad        /oic/d	/oic/p	/oic/res
@{RES_INTERFACES}    oic.if.ll    oic.if.baseline
${INVALID_KEY}  	invalidKey
${INVALID_VALUE}        invalidvalue
${INVALID_URI}          /invalidURI
${FACTORY_KEY}  	fr
${FACTORY_VALUE}        true
${REBOOT_KEY}  		 rb
${REBOOT_VALUE}	 	true
${REGION_KEY}   	region
${REGION_VALUE} 	Chittagong, Bangladesh
${BWT_HREF}        /device/test-tool-bwt

${PATTERN}      ://

#Provision
${JUST_WORKS_SERVER}	just_works_server
${RANDOM_PIN_SERVER}	random_pin_server
${OXM_JUST_WORKS}	0
${RANDOM_PIN_BASED_OTM}    1
${MANUFACTURER_CERTIFICATE_BASED_OTM}	2
${PAYLOAD_TYPE_REP}	REP
${PAYLOAD_TYPE_SECURITY}	SECURITY
${PROVISIONING_TOOL_DIRECTED_PROVISIONING_MODE}	3
${PROVISION_QUERY_UNOWNED}	Owned=FALSE
${PROVISION_QUERY_OWNED}	Owned=TRUE

${SECURITY_CLIENT_DIR_GUI}        provisioning
${SECURITY_CLIENT_DIR_CLI}        provisioning
${DTLS_RELAY_DIR}        ../DtlsRelay/
${DTLS_RELAY}        stdbuf -oL ./dtls_relay
${SECURITY_CLIENT}    stdbuf -oL ./simulator_runner.sh 1
${SECURED_CLIENT}    stdbuf -oL ./simulator_runner.sh 2
${SECURITY_CLIENT_PROCESS_ID}    Security_Client_Process_Id
${DTLS_RELAY_PROCESS_ID}    Dtls_Relay_Process_Id
${DEVICE_ID}    Linux
${PROVISIONING_SUCCESS_MESSAGE}	Received provisioning results: Result is = 1
${OWNER_TRANSFER_SUCCESS_MESSAGE}	Transferred Ownership successfuly for device
${SECURED_GET_FAILURE_MESSAGE}	INFO: PayloadLog: NULL Payload
${RANDOM_PIN}	0
${SUBJECT}	1111111111111111
${RESOURCE_URI}	/oic/conformance/test
${PERMISSION}	CRUDN
${RESOURCE_OWNER}	1234567891234567
${INPUT_DEVICE_SELECTION}	1
${INPUT_RESOURCE_COUNT}    1
${INPUT_OWNER_COUNT}	1
${INPUT_DISCOVERY_UNOWNED_DEVICE}	1
${INPUT_DISCOVERY_OWNED_DEVICE}	2
${INPUT_OWNER_TRANSFER}	3
${INPUT_PROVISIONING_ACL}	4
${INPUT_CLOSE_SECURITY_CLIENT}	11

${PAYLOAD_OXMSEL_JUST_WORKS}	payload_oxmsel
${PAYLOAD_PSTAT_PROVISIONING_MODE}	payload_pstat
${PAYLOAD_BLOCKWISE}	payload_blockwise
${PAYLOAD_FILE_DIR}	libs/payload.json
${FIND_AND_GET}    TE -------->   Discovering Secured Resource and Sending Get Request   --------> DUT
${PROVISION_CLIENT_DI}    YWRtaW5EZXZpY2VVVUlEMA==

${COMPLETE_CREATE}       COMPLETE_CREATE
${SUBORDINATE_CREATE}    SUBORDINATE_CREATE
${RETRIEVE}              RETRIEVE
${COMPLETE_UPDATE}       COMPLETE_UPDATE
${PARTIAL_UPDATE}        PARTIAL_UPDATE
${SUPPORT_DELETE}                DELETE

#Cipher Suite
${TLS_NULL_WITH_NULL_NULL}	0
${TLS_ECDH_anon_WITH_AES_128_CBC_SHA_256}	49176
${TLS_PSK_WITH_AES_128_CCM_8}	49320
${TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA_256}	49207
${TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8}	49326

#Dtls Relay
${DTLS_RELAY_IP}	10.0.2.15
${DTLS_DATA_PORT}	12346
${DTLS_COMMAND_PORT}	12345

#Observe Notification
${CON_UPDATE_REQUIREMENT_ACK}    3
${NON_UPDATE_REQUIREMENT_ACK}    12
${CON_UPDATE_REQUIREMENT_RST}    1
${NON_UPDATE_REQUIREMENT_RST}    4

#Multicast Addresses
${IP4_MULTICAST_GROUP}    224.0.1.187
${IP6_MULTICAST_GROUP}    ff02:0:0:0:0:0:0:fd
