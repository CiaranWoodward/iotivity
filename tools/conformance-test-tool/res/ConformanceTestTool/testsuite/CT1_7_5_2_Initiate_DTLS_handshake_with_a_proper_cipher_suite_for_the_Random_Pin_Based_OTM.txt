*** Settings ***
Documentation	CT1.7.5.2 Initiate DTLS handshake with a proper cipher suite for the Random Pin Based OTM
Resource	OIC_ConformanceTest_Setting.txt
Test Setup    Start Capture
Test TearDown    End Capture

*** Test Cases ***
CT1.7.5.2 Initiate DTLS handshake with a proper cipher suite for the Random Pin Based OTM
    [Documentation]					
	...	|author	| |	
	...	|reviewer|	|			
	...	|since	| 2015-10-09 |
	...	|see	| 1. Security Spec Section 7.3.4 Random PIN Based Owner Transfer Method |
	...	|see	| 2. Security Spec Section 10.2.1.2 Random PIN Method Cipher Suites |
	...	|objective	| Verify the Server (DUT) selects cipher suite as TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256 for the  |
	...	|objective	| DTLS handshake , and successfully finishes the DTLS handshake process if the Server(DUT) claims it supports Random Pin Based OTM in CT1.7.1 |
	...	|target	| Server DUT |
	...	|test_data| DTLS Hello Message |
	...	|test_configuration | 1. Server (DUT) should be an ‘unowned’ state and support the ‘Random Pin Based’ OTM |
	...	|test_configuration | 2. Client (TE)  should support ‘Random Pin Based’ OTM.|
	...	|pre_condition|1. CT1.7.2.1 with option2 (Random Pin Based) is successfully finished. |
	...	|pre_condition|2. CT1.7.4 is successfully finished. |
	...	|procedure| 1. Use the Test Application to  initiate DTLS handshake |	
	...	|procedure| 2. Server participates handshake |
	...	|post_condition|None |
	...	|expected| 1. Wireless packet sniffer can see that TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256 cipher suite is selected.  |
	...	|expected| 2. DTLS handshake is successfully finished. |

    [Tags]	Optional    Security
    
    Wait For User Confirmation	Please Start Wireless Packet Sniffer Tool to Monitor
    
    Initialize Device Controller	${DEVICE_ID}
    Change Working Directory	${DTLS_RELAY_DIR}
    Execute Application	${DTLS_RELAY_PROCESS_ID}	${DTLS_RELAY}
    Start Application Log	${DEVICE_ID}	${DTLS_RELAY_PROCESS_ID}
    Sleep	5 seconds
    ${app_log}	Get Application Log	${DEVICE_ID}	${DTLS_RELAY_PROCESS_ID}
    Should Contain	${app_log}	Staring Dtls Relay
    Should Not Contain	${app_log}	data address bind failed

	${dut_response}	Get Multicast Discovery Request List	${COAP}	${OIC_CORE_PROVISION_URI}	${PROVISION_QUERY_UNOWNED}
    
    ${dut_response_code}	${resource_ip}	${resource_port}	${response_payload}	Get Response Code IP Port And Payload From Response	${dut_response}
	Should Be Equal         ${COAP_RESPONSE_CODE_SUCCESS}   ${dut_response_code}
	${payload}	Get Payload From File	payload_oxmsel_random	${PAYLOAD_FILE_DIR}
	
	${message_id}	Generate Message Id
	${token}	Generate Token
	${dut_put_response}        Send Put Request        ${UNICAST}      ${COAP} 	${message_id}	${token}	${resource_ip}	  ${${resource_port}}	${OIC_CORE_PROVISION_URI}	${CONFIRMABLE}	${payload}	${PAYLOAD_TYPE_SECURITY}
	Should Not Be Empty             ${dut_put_response}
	${dut_put_response_code}	Get Response Code	${dut_put_response}
	Should Be Equal	${COAP_RESPONSE_CODE_UPDATED}	${dut_put_response_code}
	
	${dut_get_response}        Send Get Request        ${UNICAST}      ${COAP} 	${message_id}	${token}	${resource_ip}	  ${${resource_port}}	${OIC_CORE_PROVISION_PSTAT}	${CONFIRMABLE}
	Should Not Be Empty             ${dut_get_response}
	${dut_get_response_code}   Get Response Code       ${dut_get_response}
	Should Be Equal         ${COAP_RESPONSE_CODE_SUCCESS}   ${dut_get_response_code}
	
	${payload}	Get Payload From File	payload_pstat_random	${PAYLOAD_FILE_DIR}
	
	${dut_put_response}        Send Put Request        ${UNICAST}      ${COAP} 	${message_id}	${token}	${resource_ip}	  ${${resource_port}}	${OIC_CORE_PROVISION_PSTAT}	${CONFIRMABLE}	${payload}	${PAYLOAD_TYPE_SECURITY}
	Should Not Be Empty             ${dut_put_response}
	${dut_put_response_code}	Get Response Code	${dut_put_response}
	
	${secured_port}	Get Secured Port	${resource_ip}	${${resource_port}}
	
	${current_time}	Get Current Date
    ConformanceKeyword.Log To Console	Initializing DTLS Handshake for Just Works at ${current_time} ...
	
	${client_di}	Set Variable	adminDeviceUUID0
	${server_di}	Set Variable	randomPinDevUUIDadminDeviceUUID0
	${random_pin}	Wait For User Confirmation	INPUT PIN
	
	${is_successful}	Intialize Dtls Connection With Random Pin	${DTLS_RELAY_IP}	${DTLS_COMMAND_PORT}	${resource_ip}	${secured_port}	${TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA_256}	${client_di}	${server_di}	${random_pin}
    Should be True	${is_successful}
    
    ${current_time}	Get Current Date
    ConformanceKeyword.Log To Console	Finishing DTLS Handshake for Just Works at ${current_time} ...
    
    Terminate Dtls Connection
    Terminate Application	${DTLS_RELAY_PROCESS_ID}
    
    
    Print Message	Please verify Wireless packet sniffer can see that TLS_ECDH_anon_WITH_AES_128_CBC_SHA256 ciphersuite is selected Manually

