*** Settings ***
Documentation	CT1.7.5.1 Initiate DTLS handshake with a proper cipher suite for the Just-Works OTM
Resource	OIC_ConformanceTest_Setting.txt
Test Setup    Start Capture
Test TearDown    End Capture

*** Variables ***
${SECURITY_CLIENT_DIR}        ../../ProvisioningClient_Temp
${SECURITY_CLIENT}    stdbuf -oL ./simulator_runner.sh
${SECURITY_CLIENT_PROCESS_ID}    Security_Client_Process_Id
${DEVICE_ID}    Linux


*** Test Cases ***
CT1.7.5.1 Initiate DTLS handshake with a proper cipher suite for the Just-Works OTM
    [Documentation]					
	...	|author	| |	
	...	|reviewer|	|			
	...	|since	|2015-10-09 |
	...	|see	| 1. Security Spec Section 7.34.23 Just-Works Owner Transfer Method |
	...	|see	| 2. Security Spec Section 10.2.1.1 Just Works Method Cipher Suites |
	...	|objective	|Verify the Server (DUT) selects cipher suite as TLS_ECDH_anon_WITH_AES_128_CBC_SHA256 for the DTLS handshake, and  |
	...	|objective	|successfully finishes the DTLS handshake process if the Server(DUT) claims it supports Just-Works OTM in CT1.7.1. |
	...	|target	|Server DUT |
	...	|test_data| DTLS Hello Message |
	...	|test_configuration| 1. Server (DUT) should be an ‘unowned’ state and support the ‘Just-Wworks’ OTM |
	...	|test_configuration| 2. Client (TE) should support ‘Just-Works’ OTM. |
	...	|pre_condition| 1. CT1.7.2.1 with option1 (Just-Works) is successfully finished.  |
	...	|pre_condition| 2. CT1.7.4 is successfully finished. |
	...	|procedure| 1. Use the Test Application to Initiates DTLS session |	
	...	|procedure| 2. DUT Participates handshake  |
	...	|post_condition|None |
	...	|expected| 1. Wireless packet sniffer can see that TLS_ECDH_anon_WITH_AES_128_CBC_SHA256 ciphersuite is selected   |
	...	|expected| 2. DTLS handshake is successfully finished |

    [Tags]	Optional    Security

    Wait For User Confirmation	Please Start Wireless Packet Sniffer Tool to Monitor

    Initialize Device Controller	${DEVICE_ID}
    Change Working Directory	${DTLS_RELAY_DIR}
    Execute Application	${DTLS_RELAY_PROCESS_ID}	${DTLS_RELAY}
    Start Application Log	${DEVICE_ID}	${DTLS_RELAY_PROCESS_ID}
    Sleep	5 seconds
    ${app_log}	Get Application Log	${DEVICE_ID}	${DTLS_RELAY_PROCESS_ID}
    Should Contain	${app_log}	Staring Dtls Relay
    Should Not Contain	${app_log}	data address bind failed

	${dut_response}	Get Multicast Discovery Request List	${COAP}	${OIC_CORE_PROVISION_URI}	${PROVISION_QUERY_UNOWNED}

    ${dut_response_code}	${resource_ip}	${resource_port}	${response_payload}	Get Response Code IP Port And Payload From Response	${dut_response}
	Should Be Equal         ${COAP_RESPONSE_CODE_SUCCESS}   ${dut_response_code}
#	${payload}	Get Payload From File	${PAYLOAD_OXMSEL_JUST_WORKS}	${PAYLOAD_FILE_DIR}

#	${message_id}	Generate Message Id
#	${token}	Generate Token
#	${dut_put_response}        Send Put Request        ${UNICAST}      ${COAP} 	${message_id}	${token}	${resource_ip}	  ${${resource_port}}	${OIC_CORE_PROVISION_URI}	${CONFIRMABLE}	${payload}	${PAYLOAD_TYPE_SECURITY}
#	Should Not Be Empty             ${dut_put_response}
#	${dut_put_response_code}	Get Response Code	${dut_put_response}
#	Should Be Equal	${COAP_RESPONSE_CODE_UPDATED}	${dut_put_response_code}

#	${dut_get_response}        Send Get Request        ${UNICAST}      ${COAP} 	${message_id}	${token}	${resource_ip}	  ${${resource_port}}	${OIC_CORE_PROVISION_PSTAT}	${CONFIRMABLE}
#	Should Not Be Empty             ${dut_get_response}
#	${dut_get_response_code}   Get Response Code       ${dut_get_response}
#	Should Be Equal         ${COAP_RESPONSE_CODE_SUCCESS}   ${dut_get_response_code}

#	${payload}	Get Payload From File	${PAYLOAD_PSTAT_PROVISIONING_MODE}	${PAYLOAD_FILE_DIR}

#	${dut_put_response}        Send Put Request        ${UNICAST}      ${COAP} 	${message_id}	${token}	${resource_ip}	  ${${resource_port}}	${OIC_CORE_PROVISION_PSTAT}	${CONFIRMABLE}	${payload}	${PAYLOAD_TYPE_SECURITY}
#	Should Not Be Empty             ${dut_put_response}
#	${dut_put_response_code}	Get Response Code	${dut_put_response}

	${current_time}	Get Current Date
    ConformanceKeyword.Log To Console	Initializing DTLS Handshake for Just Works at ${current_time} ...	

	${discovered_device}    Discover Unowned Device    ${resource_ip}
	${server_device_id}    Get Device Id
	${dut_secured_port}    Get Secured Port
	${relay_ip}    Get Current System Ip Adderres    ${False}
	${relay_control_port}    Get Relay Control Port
	${client_device_id}    Get Provisioning Client Device Id
	${is_successful}	Provision With Just Works    ${client_device_id}    ${server_device_id}    ${relay_ip}    ${relay_control_port}    ${resource_ip}    ${dut_secured_port}
    Should be True    ${is_successful}    Failed to stablish DTLS connection using Just Works method

    ${current_time}	Get Current Date
    ConformanceKeyword.Log To Console	Finishing DTLS Handshake for Just Works at ${current_time} ...

    Terminate Dtls Connection
    Terminate Application	${DTLS_RELAY_PROCESS_ID}

    Print Message	Please verify Wireless packet sniffer can see that TLS_ECDH_anon_WITH_AES_128_CBC_SHA256 ciphersuite is selected Manually