//******************************************************************
//
// Copyright 2016 Intel Corporation All Rights Reserved.
//
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

/*
 * Define payload structures
 *
 */

#ifndef OC_PAYLOADS_H_
#define OC_PAYLOADS_H_

/**
 * This structure describes the platform properties. All non-Null properties will be
 * included in a platform discovery request.
 */
typedef struct
{
    /** Platform ID.*/
    char platformID[32];

    /** Manufacturer name.*/
    char manufacturerName[MAX_MANUFACTURER_NAME_LENGTH];

    /** Manufacturer URL for platform property.*/
    char manufacturerUrl[MAX_MANUFACTURER_URL_LENGTH];

    /** Model number.*/
    char modelNumber[32];

    /** Manufacturer date.*/
    char dateOfManufacture[32];

    /** Platform version.*/
    char platformVersion[32];

    /** Operating system version.*/
    char operatingSystemVersion[32];

    /** HW version.*/
    char hardwareVersion[32];

    /** FW version.*/
    char firmwareVersion[32];

    /** Platform support URL.*/
    char supportUrl[URI_RESOURCE_LENGTH];

    /** System time.*/
    char systemTime[32];

} OCPlatformInfo;

/**
 * This structure is expected as input for device properties.
 * device name is mandatory and expected from the application.
 * device id of type UUID will be generated by the stack.
 */
typedef struct
{
    /** Pointer to the device name.*/
    char deviceName[64];

} OCDeviceInfo;

#ifdef RA_ADAPTER
/**
 * CA Remote Access information for XMPP Client
 *
 */
typedef struct
{
    char *hostname;     /**< XMPP server hostname */
    uint16_t   port;    /**< XMPP server serivce port */
    char *xmpp_domain;  /**< XMPP login domain */
    char *username;     /**< login username */
    char *password;     /**< login password */
    char *resource;     /**< specific resource for login */
    char *user_jid;     /**< specific JID for login */
} OCRAInfo_t;
#endif  /* RA_ADAPTER */

typedef struct
{
    OCPayloadType type;
    int bo;             // byte offset to allocation buffer
} OCPayload;

typedef struct OCRepPayloadValue
{
    char *name;
    OCRepPayloadPropType type;
    union
    {
        int64_t i;
        double d;
        bool b;
        char *str;
        struct OCRepPayload *obj;
    };
    struct OCRepPayloadValue* next;

} OCRepPayloadValue;

typedef struct OCStringLL
{
    struct OCStringLL *next;    // must be first
    char *value;
} OCStringLL;

// used for get/set/put/observe/etc representations
typedef struct OCRepPayload
{
    OCPayload base;
    char *uri;
    OCStringLL *types;
    OCStringLL *interfaces;
    OCRepPayloadValue *values;
    struct OCRepPayload *next;
} OCRepPayload;

typedef struct
{
    OCPayload base;
    char *securityData;
} OCSecurityPayload;

// used inside a discovery payload
typedef struct OCResourcePayload
{
    char *uri;
    uint8_t *sid;
    OCStringLL *types;
    OCStringLL *interfaces;
    uint8_t flags;
    bool secure;
    uint16_t port;
    struct OCResourcePayload *next;
} OCResourcePayload;

typedef struct
{
    OCPayload base;
    OCResourcePayload *resources;
} OCDiscoveryPayload;

typedef struct
{
    OCPayload base;
    char *uri;
    uint8_t *sid;
    char *deviceName;
    char *specVersion;
    char *dataModelVersion;
} OCDevicePayload;

typedef struct
{
    OCPayload base;
    char* uri;
    OCPlatformInfo info;
} OCPlatformPayload;

#ifdef WITH_CLIENT
#ifdef WITH_PRESENCE
typedef struct
{
    OCPayload base;
    uint32_t sequenceNumber;
    uint32_t maxAge;
    OCPresenceTrigger trigger;
    char* resourceType;
} OCPresencePayload;
#endif // WITH_PRESENCE

#endif // WITH_CLIENT

#endif // OC_PAYLOADS_H_
