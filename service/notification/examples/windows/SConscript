##
# Notification build script
##

Import('env')

lib_env = env.Clone()
SConscript(env.get('SRC_DIR') + '/service/third_party_libs.scons', 'lib_env')
notification_sample_env = lib_env.Clone()

target_os = env.get('TARGET_OS')
rd_mode = env.get('RD_MODE')
######################################################################
# Build flags
######################################################################
notification_sample_env.AppendUnique(CPPPATH = ['../../include'])
notification_sample_env.AppendUnique(CPPPATH = ['../../src/common'])
notification_sample_env.AppendUnique(CPPPATH = ['../../src/provider'])
notification_sample_env.AppendUnique(CPPPATH = ['../../../../resource/csdk/stack/include'])
notification_sample_env.AppendUnique(CPPPATH = ['../../../../resource/csdk/resource-directory/include'])
notification_sample_env.AppendUnique(CPPPATH = ['../../../../resource/csdk/connectivity/api'])

if lib_env.get('SECURED') == '1':
    notification_sample_env.AppendUnique(LIBS = ['mbedtls','mbedx509','mbedcrypto', 'tinydtls'])

notification_sample_env.PrependUnique(LIBS = [
	'octbstack_static',
	'oc_logger',
	'connectivity_abstraction',
	'coap',
	'ocsrm'
	])

notification_sample_env.PrependUnique(LIBS = ['mswsock', 'ws2_32', 'iphlpapi', 'ole32', 'bcrypt', 'Crypt32'])

notification_sample_consumer_src = 'notificationconsumer.c'

if env.get('WITH_TCP') == True:
	notification_sample_env.AppendUnique(CPPDEFINES = ['WITH_TCP'])
if env.get('SECURED') == '1':
	notification_sample_env.AppendUnique(LIBS = ['mbedtls', 'mbedx509', 'mbedcrypto'])

if 'CLIENT' in rd_mode or 'SERVER' in rd_mode:
	notification_sample_env.AppendUnique(LIBS = ['resource_directory'])

####################################################################
# Source files and Targets
######################################################################

notification_sample_consumer_env = notification_sample_env.Clone()
notification_sample_consumer_env.AppendUnique(LIBS = 'notification_consumer')
notificationconsumer = notification_sample_consumer_env.Program('notificationconsumer', notification_sample_consumer_src)
i_notificationconsumer = notification_sample_consumer_env.Install(env.get('BUILD_DIR'), notificationconsumer)

