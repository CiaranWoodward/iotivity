#******************************************************************
#
# Copyright 2015 Samsung Electronics All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

##
# Linux sample application  build script (Sample Client & Sample Server)
##
Import('env')

# Add third party libraries
lib_env = env.Clone()
SConscript(env.get('SRC_DIR') + '/service/third_party_libs.scons', 'lib_env')

NMProducer_env = lib_env.Clone()
NMConsumer_env = lib_env.Clone()

######################################################################
# ##### Notification Provider #####
######################################################################

NMProducer_env.AppendUnique(CXXFLAGS = ['-O2', '-g', '-Wall', '-fmessage-length=0', '-std=c++0x'])
NMProducer_env.AppendUnique(LIBS = ['nmservice', 'rcs_server', 'rcs_client', 'rcs_common','oc', 'octbstack', 'oc_logger', 'connectivity_abstraction', 'coap', 'pthread'])
NMProducer_env.AppendUnique(CPPPATH = ['../../include'])
NMProducer_env.AppendUnique(CPPPATH = ['../../../resource-encapsulation/include'])
NMProducer_env.AppendUnique(CPPPATH = ['../../../../extlibs/cjson'])

######################################################################
# ##### Notification Consumer #####
######################################################################

NMConsumer_env.AppendUnique(CXXFLAGS = ['-O2', '-g', '-Wall', '-fmessage-length=0', '-std=c++0x'])
NMConsumer_env.AppendUnique(LIBS = ['nmservice', 'rcs_server', 'rcs_client', 'rcs_common','oc', 'octbstack', 'oc_logger', 'connectivity_abstraction', 'coap', 'pthread'])
NMConsumer_env.AppendUnique(CPPPATH = ['../../include'])
NMConsumer_env.AppendUnique(CPPPATH = ['../../../resource-encapsulation/include'])
NMConsumer_env.AppendUnique(CPPPATH = ['../../../resource-encapsulation/src/common/primitiveResource/include'])
NMConsumer_env.AppendUnique(CPPPATH = ['../../extlibs/cjson'])

if env.get('SECURED') == '1':
    NMProducer_env.AppendUnique(LIBS = ['tinydtls'])
    NMConsumer_env.AppendUnique(LIBS = ['tinydtls'])

if 'rt' in NMProducer_env.get('LIBS'):
    NMProducer_env.Append(LIBS = ['rt'])
if 'rt' in NMConsumer_env.get('LIBS'):
    NMConsumer_env.Append(LIBS = ['rt'])

####################################################################
# Source files and Targets
####################################################################
sampleNotificationProducer = NMProducer_env.Program('sampleNotificationProducer', 'SampleNotificationProducer.cpp')
sampleNotificationConsumer = NMConsumer_env.Program('sampleNotificationConsumer', 'SampleNotificationConsumer.cpp')

NMProducer_env.InstallTarget(sampleNotificationProducer, 'sampleNotificationProducer')
NMConsumer_env.InstallTarget(sampleNotificationConsumer, 'sampleNotificationConsumer')
