
'''
/******************************************************************
*
* Copyright 2017 Granite River Labs All Rights Reserved.
*
*
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
******************************************************************/
'''
print '\n---------------Started Building PM Module for Windows---------------\n'

Import('env_windows')
import os

env_windows['CC'] = 'cl'

# TODO: re-enable warnings, especially: 4244, 4267, 4365
env_windows.AppendUnique(CXXFLAGS=[
    '/wd4244',   # C4244 conversion from one type to another type results in a possible loss of data.
    '/wd4267',   # C4267 conversion from size_t to a smaller type.
    '/wd4355',   # C4355 'this' used in base member initializer list.
    '/wd4800',   # C4800 forcing value to bool 'true' or 'false'.
    '/wd4996',   # C4996 deprecated declaration.
    '/wd4820',   # C4820 added padding to the end of a struct.
    '/wd4514',   # C4514 unreferenced inline function has been removed
    '/wd4365',   # C4365 signed/unsigned mismatch
    '/wd4503'])  # C4503 decorated name length exceeded, name was truncated

env_windows.AppendUnique(CCFLAGS=['/EHsc'])

vs_version = env_windows['MSVC_VERSION']

# Set release/debug flags
if env_windows.get('RELEASE'):
    env_windows.AppendUnique(CCFLAGS = ['/MD', '/O2', '/GF'])
    env_windows.AppendUnique(CPPDEFINES = ['NDEBUG'])
elif env_windows.get('TARGET_ARCH') in ['x86', 'x86_64'] or "14.0" in vs_version:
    env_windows.AppendUnique(CCFLAGS = ['/MDd', '/Od', '/ZI', '/RTC1', '/Gm'])
    env_windows.AppendUnique(LINKFLAGS = ['/debug'])
else:
    env_windows.AppendUnique(CCFLAGS = ['/MDd', '/Od', '/Zi', '/RTC1', '/Gm'])
    env_windows.AppendUnique(LINKFLAGS = ['/debug'])
    env_windows.AppendUnique(LIBPATH = [env_windows.get('BUILD_DIR')])
    env_windows.AppendUnique(PATH = os.environ['PATH'])

iotivity_root = env_windows.get('IOTIVITY_ROOT')
iotivity_lib_path = env_windows.get('IOTIVITY_LIB_PATH')
iotivity_test_root = env_windows.get('IOTIVITY_TEST_ROOT')
variant_dir = env_windows.get('VARIANT_DIR')
install_dir = env_windows.get('INSTALL_DIR')
test_src_root = iotivity_test_root + '/' + variant_dir
test = env_windows.get('TEST')
sdk = env_windows.get('SDK')
common_windows_cppflags = env_windows.get('COMMON_WINDOWS_CPPFLAGS')

cert_enabled = 1
mot_enabled = 1

install_targets = []
default_targets = []

iotivity_include_paths = [
    iotivity_root + '/extlibs/boost/boost',
    iotivity_root + '/resource/csdk',
    iotivity_root + '/resource/csdk/include',
    iotivity_root + '/resource/csdk/security/include',
    iotivity_root + '/resource/csdk/security/include/experimental',
    iotivity_root + '/resource/csdk/security/include/internal',
    iotivity_root + '/resource/csdk/security/provisioning/include',
    iotivity_root + '/resource/csdk/security/provisioning/include/internal',
    iotivity_root + '/resource/csdk/security/provisioning/include/oxm',
    iotivity_root + '/resource/csdk/security/provisioning/include/cloud',
    iotivity_root + '/resource/include',
    iotivity_root + '/resource/csdk/stack/include',
    iotivity_root + '/resource/csdk/ocrandom/include',
    iotivity_root + '/resource/csdk/logger/include',
    iotivity_root + '/resource/csdk/connectivity/inc',
    iotivity_root + '/resource/csdk/connectivity/inc/pkix',
    iotivity_root + '/resource/csdk/connectivity/common/inc',
    iotivity_root + '/resource/csdk/connectivity/lib/libcoap-4.1.1',
    iotivity_root + '/resource/csdk/connectivity/api',
    iotivity_root + '/resource/c_common/oic_malloc/include',
    iotivity_root + '/resource/c_common',
    iotivity_root + '/resource/c_common/oic_string/include',
    iotivity_root + '/resource/c_common/oic_string/include',
    iotivity_root + '/resource/oc_logger/include',
    iotivity_root + '/resource/csdk/connectivity/lib/libcoap-4.1.1/include/',
    iotivity_root + '/resource/csdk/resource-directory/include',
    iotivity_root + '/extlibs/cjson',
    iotivity_root + '/extlibs/base64',
    iotivity_root + '/extlibs/tinycbor/tinycbor/src',
    iotivity_root + '/extlibs/mbedtls/mbedtls/include',
    iotivity_root + '/extlibs/tinydtls',
    iotivity_root + '/extlibs/mbedtls/mbedtls/include/mbedtls'
]

cert_include_paths = [
    iotivity_root + '/resource/csdk/security/provisioning/ck_manager/include',
    iotivity_root + '/resource/csdk/security/include/internal',
    iotivity_root + '/resource/csdk/security/include',
    iotivity_root + '/resource/csdk/connectivity/inc/pkix',
    iotivity_root + '/extlibs/asn1cert',
    iotivity_root + '/extlibs/tinydtls/ecc',
    iotivity_root + '/extlibs/tinydtls/sha2',
    iotivity_root + '/extlibs/asn1cert/'
]

csdk_tc_include_paths = [
    iotivity_test_root + '/include',
    test_src_root + '/tc/pm/gtest/csdk/include',
    iotivity_test_root + '/extlibs/gtest-1.7.0/include'
]

cpp_tc_include_paths = [
    iotivity_test_root + '/include',
    test_src_root + '/tc/pm/gtest/cpp/include',
    iotivity_test_root + '/extlibs/gtest-1.7.0/include'
]

tc_util = [
    iotivity_test_root + '/src/common/commonutil/c_cpp/trace.c',
    iotivity_test_root + '/src/common/testcase/gtest/IotivitySECTestMain.cpp',
    iotivity_test_root + '/src/common/commonutil/c_cpp/CommonTestUtil.cpp'
]

csdk_testapp_include_paths = [test_src_root + '/iBtestapp/modules/pm/c_cpp/csdk/include']

cpp_testapp_include_paths = [test_src_root + '/iBtestapp/modules/pm/c_cpp/cpp/include']

simulator_include_paths = [iotivity_test_root + '/include']

lib_paths = [
    iotivity_lib_path,
    iotivity_lib_path + '/resource/csdk/logger',
    iotivity_lib_path + '/resource/csdk/security',
    iotivity_lib_path + '/resource/c_common/',
    iotivity_lib_path + '/resource/csdk/routing/',
    iotivity_test_root + '/extlibs/gtest-1.7.0/bin/windows/',
    iotivity_root + '/extlibs/sqlite3/',
    iotivity_root + '/extlibs/mbedtls/'
]

iotivity_test_include_paths = [ iotivity_test_root + '/include' ]

iotivity_common_includes_paths = [
    iotivity_root + '/extlibs/boost/boost',
    iotivity_root + '/resource/csdk/logger/include',
    iotivity_root + '/resource/csdk/stack/include',
    iotivity_root + '/resource/c_common',
    iotivity_root + '/resource/c_common/oic_malloc/include',
    iotivity_root + '/resource/c_common/oic_string/include',
    iotivity_root + '/resource/oc_logger/include',
    iotivity_root + '/extlibs/tinycbor/tinycbor/src',
    iotivity_root + '/resource/include',
    iotivity_root + '/resource/csdk/include',
    iotivity_root + '/resource/csdk/resource-directory/include',
]

csdk_tc_src = [
    Glob(test_src_root + '/tc/pm/gtest/csdk/src/helper/*.cpp'),
    Glob(test_src_root + '/tc/pm/gtest/csdk/src/btc/*.cpp'),
    Glob(test_src_root + '/tc/pm/gtest/csdk/src/stc/*.cpp')
]

cpp_tc_src = [
    Glob(test_src_root + '/tc/pm/gtest/cpp/src/helper/*.cpp'),
    Glob(test_src_root + '/tc/pm/gtest/cpp/src/btc/*.cpp'),
    Glob(test_src_root + '/tc/pm/gtest/cpp/src/stc/*.cpp')
]

csdk_testapp_src = [
    Glob(test_src_root + '/iBtestapp/modules/pm/c_cpp/csdk/src/*.cpp')
]

cpp_testapp_src = [
    Glob(test_src_root + '/iBtestapp/modules/pm/c_cpp/cpp/src/*.cpp')
]

cppflags = Split('-D__WINDOWS__ -D_WIN -DHAVE_STRUCT_TIMESPEC -D_MSC_VER=1900 -DBOOST_ASIO_WINDOWS_RUNTIME')

csdk_lib_list = Split('bcrypt Ws2_32 advapi32 iphlpapi crypt32 boost_system boost_filesystem boost_thread octbstack_internal connectivity_abstraction_internal c_common coap oc oc_logger_internal ocsrm logger octbstack ocpmapi_internal ocprovision octbstack resource_directory mbedtls mbedx509 mbedcrypto common_util routingmanager ipca win_helper')

cpp_lib_list = Split('bcrypt Ws2_32 advapi32 iphlpapi crypt32 boost_system boost_filesystem boost_thread c_common coap connectivity_abstraction_internal oc oc_logger_internal ocsrm octbstack ocprovision ocsrm octbstack mbedtls mbedcrypto mbedx509 routingmanager resource_directory sqlite3 common_util win_helper')

cppdefines = ['-DWITH_CLOUD', '-DRD_CLIENT', '-DWITH_CLOUD', '-DNDEBUG', '-DTCP_ADAPTER', '-DIP_ADAPTER', '-DNO_EDR_ADAPTER', '-DLE_ADAPTER', '-DMQ_SUBSCRIBER', '-DWITH_MQ', '-DMQ_PUBLISHER', '-DSHA2_USE_INTTYPES_H', '-D__WITH_DTLS__', '-D__WITH_TLS__', '-D_ENABLE_MULTIPLE_OWNER_', '-DROUTING_EP', '-DWITH_BWT', '-DCA_DBUS_GATT_SERVICE_NAME', '-DGLIB_VERSION_MIN_REQUIRED', '-DGLIB_VERSION_2_32', '-DWITH_TCP'] 

if cert_enabled == 1:
    cppflags.append('-D__CERT__')

if mot_enabled == 1:
    cppflags.append('-D__MOT__')

cppflags.append('-DMULTIPLE_OWNER')

if 'tc' in test:

    if 'csdk' in sdk:
        csdk_tc = env_windows.Program(source = csdk_tc_src + tc_util,
                            target = 'iotivity_pm_csdk_test',
                            CPPPATH = iotivity_include_paths + cert_include_paths + csdk_tc_include_paths + iotivity_common_includes_paths + iotivity_test_include_paths,
                            LIBS = csdk_lib_list + ['gtest'],
                            LIBPATH = lib_paths + ['.'],
                            RPATH = iotivity_lib_path,
                            CPPFLAGS = cppflags + cppdefines + common_windows_cppflags)
        install_targets += csdk_tc

    if 'cpp' in sdk:
        cpp_tc = env_windows.Program(source = cpp_tc_src + tc_util, 
                            target = 'iotivity_pm_cpp_test', 
                            CPPPATH = iotivity_include_paths + cert_include_paths + cpp_tc_include_paths + iotivity_common_includes_paths + iotivity_test_include_paths,
                            LIBS = csdk_lib_list + ['gtest'],
                            LIBPATH = lib_paths + ['.'],
                            RPATH = iotivity_lib_path,
                            CPPFLAGS = cppflags + cppdefines +common_windows_cppflags)
        install_targets += cpp_tc

if 'tc' in test or 'simulator' in test:
    test_simulator = env_windows.Program(source = test_src_root + '/testapp/pm/test_server.cpp',
                    target = 'iotivity_pm_server',
                    CPPPATH = iotivity_include_paths + simulator_include_paths,
                    LIBS = csdk_lib_list,
                    LIBPATH = lib_paths + ['.'],
                    RPATH = iotivity_lib_path,
                    CPPFLAGS = cppflags + common_windows_cppflags,
                    CPPDEFINES = ['__WITH_DTLS__', '__WITH_TLS__'] )
    install_targets += test_simulator


if 'app' in test:

    if 'csdk' in sdk:
        pm_test_app = env_windows.Program(source = csdk_testapp_src,
                    target = 'iotivity_pm_csdk_app',
                    CPPPATH = iotivity_include_paths + cert_include_paths + csdk_tc_include_paths + csdk_testapp_include_paths,
                    LIBS = csdk_lib_list + ['gtest'],
                    LIBPATH = lib_paths + ['.'],
                    RPATH = iotivity_lib_path,
                    CPPFLAGS = cppflags + common_windows_cppflags)
        install_targets += pm_test_app

    if 'cpp' in sdk:
        pm_test_app = env_windows.Program(source = cpp_testapp_src,
                    target = 'iotivity_pm_cpp_app',
                    CPPPATH = iotivity_include_paths + cert_include_paths + cpp_tc_include_paths + cpp_testapp_include_paths,
                    LIBS = csdk_lib_list + ['gtest'],
                    LIBPATH = lib_paths + ['.'],
                    RPATH = iotivity_lib_path,
                    CPPFLAGS = cppflags + common_windows_cppflags)
        install_targets += pm_test_app


if 'tc' in test or 'simulator' in test or 'app' in test:
    pm_resource_path = iotivity_test_root + '/res/pm_resource'
    pm_resource_list = Glob(pm_resource_path + '/*.*')

install_res = env_windows.Install(iotivity_test_root + '/' + install_dir, pm_resource_list)
install_res += env_windows.Install(iotivity_test_root + '/bin', pm_resource_list)
install_bin = env_windows.Install(iotivity_test_root + '/' + install_dir, install_targets)

delete_bin = []
i = 0
for delete_target in install_targets:
    delete_bin.append(Command(str(i), [], Delete(delete_target)))
    i = i +1

default_targets = install_bin + install_res + delete_bin
env_windows.Default(default_targets)
